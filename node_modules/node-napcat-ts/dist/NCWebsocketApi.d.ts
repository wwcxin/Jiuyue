import type { WSSendParam } from './Interfaces.js';
import { NCWebsocketBase } from './NCWebsocketBase.js';
export declare class NCWebsocketApi extends NCWebsocketBase {
    /**
     * @onebot11
     * 发送私聊消息
     */
    send_private_msg(params: WSSendParam['send_private_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 发送群聊信息
     */
    send_group_msg(params: WSSendParam['send_group_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 发送信息
     */
    send_msg(params: WSSendParam['send_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @onebot11
     * 撤回信息
     */
    delete_msg(params: WSSendParam['delete_msg']): Promise<null>;
    /**
     * @onebot11
     * 获取信息
     */
    get_msg(params: WSSendParam['get_msg']): Promise<({
        message_type: "private";
        sender: {
            user_id: number;
            nickname: string;
            card: string;
        };
        sub_type: "friend";
    } | {
        message_type: "group";
        group_id: number;
        sender: {
            user_id: number;
            nickname: string;
            card: string;
            role: "owner" | "admin" | "member";
        };
        sub_type: "normal";
    }) & {
        self_id: number;
        user_id: number;
        time: number;
        message_id: number;
        message_seq: number;
        real_id: number;
        raw_message: string;
        font: number;
        post_type: "message" | "message_sent";
    } & import("./Interfaces.js").MessageType>;
    /**
     * @onebot11
     * 获取合并转发信息
     */
    get_forward_msg(params: WSSendParam['get_forward_msg']): Promise<{
        messages: import("./Interfaces.js").WSSendReturn["get_msg"][];
    }>;
    /**
     * @onebot11
     * 点赞
     */
    send_like(params: WSSendParam['send_like']): Promise<null>;
    /**
     * @onebot11
     * 群组踢人
     */
    set_group_kick(params: WSSendParam['set_group_kick']): Promise<null>;
    /**
     * @onebot11
     * 群组禁言
     */
    set_group_ban(params: WSSendParam['set_group_ban']): Promise<null>;
    /**
     * @onebot11
     * 群组匿名用户禁言
     */
    /**
     * @onebot11
     * 群组全员禁言
     */
    set_group_whole_ban(params: WSSendParam['set_group_whole_ban']): Promise<null>;
    /**
     * @onebot11
     * 群组设置管理员
     */
    set_group_admin(params: WSSendParam['set_group_admin']): Promise<null>;
    /**
     * @onebot11
     * 群组匿名
     */
    /**
     * @onebot11
     * 设置群名片
     */
    set_group_card(params: WSSendParam['set_group_card']): Promise<null>;
    /**
     * @onebot11
     * 设置群名
     */
    set_group_name(params: WSSendParam['set_group_name']): Promise<null>;
    /**
     * @onebot11
     * 退出群组
     */
    set_group_leave(params: WSSendParam['set_group_leave']): Promise<null>;
    /**
     * @onebot11
     * 设置群聊特殊头衔
     */
    set_group_special_title(params: WSSendParam['set_group_special_title']): Promise<null>;
    /**
     * @onebot11
     * 设置好友添加请求
     */
    set_friend_add_request(params: WSSendParam['set_friend_add_request']): Promise<null>;
    /**
     * @onebot11
     * 设置群组添加请求
     */
    set_group_add_request(params: WSSendParam['set_group_add_request']): Promise<null>;
    /**
     * @onebot11
     * 获取登录号信息
     */
    get_login_info(): Promise<{
        user_id: number;
        nickname: string;
    }>;
    /**
     * @onebot11
     * 获取非好友信息
     */
    get_stranger_info(params: WSSendParam['get_stranger_info']): Promise<{
        uid: string;
        uin: string;
        nick: string;
        remark: string;
        constellation: number;
        shengXiao: number;
        kBloodType: number;
        homeTown: string;
        makeFriendCareer: number;
        pos: string;
        college: string;
        country: string;
        province: string;
        city: string;
        postCode: string;
        address: string;
        regTime: number;
        interest: string;
        labels: string[];
        qqLevel: number;
        qid: string;
        longNick: string;
        birthday_year: number;
        birthday_month: number;
        birthday_day: number;
        age: number;
        sex: "male" | "female" | "unknown";
        eMail: string;
        phoneNum: string;
        categoryId: number;
        richTime: number;
        richBuffer: string | {};
        topTime: string;
        isBlock: boolean;
        isMsgDisturb: boolean;
        isSpecialCareOpen: boolean;
        isSpecialCareZone: boolean;
        ringId: string;
        isBlocked: boolean;
        recommendImgFlag: number;
        disableEmojiShortCuts: number;
        qidianMasterFlag: number;
        qidianCrewFlag: number;
        qidianCrewFlag2: number;
        isHideQQLevel: number;
        isHidePrivilegeIcon: number;
        status: number;
        extStatus: number;
        batteryStatus: number;
        termType: number;
        netType: number;
        iconType: number;
        customStatus: unknown;
        setTime: string;
        specialFlag: number;
        abiFlag: number;
        eNetworkType: number;
        showName: string;
        termDesc: string;
        musicInfo: {
            buf: string | {};
        };
        extOnlineBusinessInfo: {
            buf: string | {};
            customStatus: unknown;
            videoBizInfo: {
                cid: string;
                tvUrl: string;
                synchType: string;
            };
            videoInfo: {
                name: string;
            };
        };
        extBuffer: {
            buf: string | {};
        };
        user_id: number;
        nickname: string;
        long_nick: string;
        reg_time: number;
        is_vip: boolean;
        is_years_vip: boolean;
        vip_level: number;
        login_days: number;
    }>;
    /**
     * @onebot11
     * 获取好友列表
     */
    get_friend_list(): Promise<{
        qid: string;
        longNick: string;
        birthday_year: number;
        birthday_month: number;
        birthday_day: number;
        age: number;
        sex: string;
        eMail: string;
        phoneNum: string;
        categoryId: number;
        richTime: number;
        richBuffer: {
            [key: string]: number;
        };
        uid: string;
        uin: string;
        nick: string;
        remark: string;
        user_id: number;
        nickname: string;
        level: number;
    }[]>;
    /**
     * @onebot11
     * 获取群信息
     */
    get_group_info(params: WSSendParam['get_group_info']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }>;
    /**
     * @onebot11
     * 获取群列表
     */
    get_group_list(params?: WSSendParam['get_group_list']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }[]>;
    /**
     * @onebot11
     * 获取群成员信息
     */
    get_group_member_info(params: WSSendParam['get_group_member_info']): Promise<{
        group_id: number;
        user_id: number;
        nickname: string;
        card: string;
        sex: "unknown" | "male" | "female";
        age: number;
        area: string;
        level: string;
        qq_level: number;
        join_time: number;
        last_sent_time: number;
        title_expire_time: number;
        unfriendly: boolean;
        card_changeable: boolean;
        is_robot: boolean;
        shut_up_timestamp: number;
        role: "owner" | "admin" | "member";
        title: string;
    }>;
    /**
     * @onebot11
     * 获取群成员列表
     */
    get_group_member_list(params: WSSendParam['get_group_member_list']): Promise<{
        group_id: number;
        group_name: string;
        member_count: number;
        max_member_count: number;
    }[]>;
    /**
     * @onebot11
     * 获取群荣誉信息
     */
    get_group_honor_info(params: WSSendParam['get_group_honor_info']): Promise<{
        group_id: string;
        current_talkative: {
            user_id: number;
            avatar: string;
            nickname: string;
            day_count: number;
            description: string;
        };
        talkative_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        performer_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        legend_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        emotion_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
        strong_newbie_list: {
            user_id: number;
            avatar: string;
            description: string;
            day_count: number;
            nickname: string;
        }[];
    }>;
    /**
     * @onebot11
     * 获取Cookies
     */
    get_cookies(params: WSSendParam['get_cookies']): Promise<{
        cookies: string;
        bkn: string;
    }>;
    /**
     * @onebot11
     * 获取CsrfToken
     */
    get_csrf_token(): Promise<{
        token: string;
    }>;
    /**
     * @onebot11
     * 获取Credentials
     */
    get_credentials(): Promise<{
        cookies: string;
        token: string;
    }>;
    /**
     * @onebot11
     * 获取语音
     */
    get_record(params: WSSendParam['get_record']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64?: string;
    }>;
    /**
     * @onebot11
     * 获取图片
     */
    get_image(params: WSSendParam['get_image']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64?: string;
    }>;
    /**
     * @onebot11
     * 能否发送图片
     */
    can_send_image(): Promise<{
        yes: true;
    }>;
    /**
     * @onebot11
     * 能否发送语音
     */
    can_send_record(): Promise<{
        yes: true;
    }>;
    /**
     * @onebot11
     * 获取运行状态
     */
    get_status(): Promise<{
        online: boolean;
        good: true;
        stat: {};
    }>;
    /**
     * @onebot11
     * 获取版本信息
     */
    get_version_info(): Promise<{
        app_name: "NapCat.Onebot";
        protocol_version: "v11";
        app_version: string;
    }>;
    /**
     * @onebot11
     * 重启
     */
    /**
     * @onebot11
     * 清理缓存
     */
    /**
     * @onebot11
     * 退出机器人
     */
    bot_exit(): Promise<null>;
    /**
     * @gocqhttp
     * 设置QQ资料
     */
    set_qq_profile(params: WSSendParam['set_qq_profile']): Promise<{
        result: 0;
        errMsg: "";
    }>;
    /**
     * @gocqhttp
     * 获取企点QQ资料
     */
    /**
     * @gocqhttp
     * 获取型号列表
     */
    _get_model_show(params: WSSendParam['_get_model_show']): Promise<{
        variants: {
            model_show: string;
            need_pay: boolean;
        };
    }[]>;
    /**
     * @gocqhttp
     * 设置型号
     */
    /**
     * @gocqhttp
     * 获取登陆的客户端
     */
    /**
     * @gocqhttp
     * 获取单向好友列表
     */
    /**
     * @gocqhttp
     * 删除好友
     */
    delete_friend(params: WSSendParam['delete_friend']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 删除单向好友
     */
    /**
     * @gocqhttp
     * 标记消息已读
     */
    mark_msg_as_read(params: WSSendParam['mark_msg_as_read']): Promise<null>;
    /**
     * @gocqhttp
     * 发送群合并转发
     */
    send_group_forward_msg(params: WSSendParam['send_group_forward_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @gocqhttp
     * 发送私聊合并转发
     */
    send_private_forward_msg(params: WSSendParam['send_private_forward_msg']): Promise<{
        message_id: number;
    }>;
    /**
     * @gocqhttp
     * 获取群聊历史消息
     */
    get_group_msg_history(params: WSSendParam['get_group_msg_history']): Promise<{
        messages: import("./Interfaces.js").WSSendReturn["get_msg"][];
    }>;
    /**
     * @gocqhttp
     * OCR图片
     */
    ocr_image(params: WSSendParam['ocr_image']): Promise<{
        text: string;
        pt1: {
            x: string;
            y: string;
        };
        pt2: {
            x: string;
            y: string;
        };
        pt3: {
            x: string;
            y: string;
        };
        pt4: {
            x: string;
            y: string;
        };
        charBox: {
            charText: string;
            charBox: {
                pt1: {
                    x: string;
                    y: string;
                };
                pt2: {
                    x: string;
                    y: string;
                };
                pt3: {
                    x: string;
                    y: string;
                };
                pt4: {
                    x: string;
                    y: string;
                };
            };
        }[];
        score: string;
    }[]>;
    /**
     * @gocqhttp
     * 获取群系统消息
     */
    get_group_system_msg(): Promise<{
        InvitedRequest: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
        join_requests: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 获取群精华列表
     */
    get_essence_msg_list(params: WSSendParam['get_essence_msg_list']): Promise<{
        msg_seq: number;
        msg_random: number;
        sender_id: number;
        sender_nick: string;
        operator_id: number;
        operator_nick: string;
        message_id: number;
        operator_time: number;
        content: import("./Structs.js").Receive[keyof import("./Structs.js").Receive][];
    }[]>;
    /**
     * @gocqhttp
     * 获取@全体成员剩余次数
     */
    get_group_at_all_remain(params: WSSendParam['get_group_at_all_remain']): Promise<{
        can_at_all: boolean;
        remain_at_all_count_for_group: number;
        remain_at_all_count_for_uin: number;
    }>;
    /**
     * @gocqhttp
     * 设置群头像
     */
    set_group_portrait(params: WSSendParam['set_group_portrait']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 设置精华消息
     */
    set_essence_msg(params: WSSendParam['set_essence_msg']): Promise<{
        errCode: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 删除精华消息
     */
    delete_essence_msg(params: WSSendParam['delete_essence_msg']): Promise<{
        errCode: 0;
        errMsg: "success";
    }>;
    /**
     * @gocqhttp
     * 设置群公告
     */
    _send_group_notice(params: WSSendParam['_send_group_notice']): Promise<null>;
    /**
     * @gocqhttp
     * 获取群公告
     */
    _get_group_notice(params: WSSendParam['_get_group_notice']): Promise<{
        notice_id: string;
        sender_id: number;
        publish_time: number;
        message: {
            text: string;
            image: {
                id: string;
                height: string;
                width: string;
            }[];
        };
    }[]>;
    /**
     * @gocqhttp
     * 上传群文件
     */
    upload_group_file(params: WSSendParam['upload_group_file']): Promise<null>;
    /**
     * @gocqhttp
     * 删除群文件
     */
    delete_group_file(params: WSSendParam['delete_group_file']): Promise<{
        result: 0;
        errMsg: "ok";
        transGroupFileResult: {
            result: {
                retCode: 0;
                retMsg: "ok";
                clientWording: "";
            };
            successFileIdList: string[];
            failFileIdList: string[];
        };
    }>;
    /**
     * @gocqhttp
     * 创建群文件文件夹
     */
    create_group_file_folder(params: WSSendParam['create_group_file_folder']): Promise<{
        result: {
            retCode: 0;
            retMsg: "ok";
            clientWording: "";
        };
        groupItem: {
            peerId: string;
            type: number;
            folderInfo: {
                folderId: string;
                parentFolderId: string;
                folderName: string;
                createTime: number;
                modifyTime: number;
                createUin: string;
                creatorName: string;
                totalFileCount: number;
                modifyUin: string;
                modifyName: string;
                usedSpace: string;
            };
            fileInfo: null;
        };
    }>;
    /**
     * @gocqhttp
     * 删除群文件文件夹
     */
    delete_group_folder(params: WSSendParam['delete_group_folder']): Promise<{
        retCode: 0;
        retMsg: "ok";
        clientWording: "";
    }>;
    /**
     * @gocqhttp
     * 获取群文件系统信息
     */
    get_group_file_system_info(params: WSSendParam['get_group_file_system_info']): Promise<{
        file_count: number;
        limit_count: 10000;
        used_space: 0;
        total_space: 10737418240;
    }>;
    /**
     * @gocqhttp
     * 获取群文件树
     */
    get_group_root_files(params: WSSendParam['get_group_root_files']): Promise<{
        files: {
            group_id: number;
            file_id: string;
            file_name: string;
            busid: number;
            size: number;
            upload_time: number;
            dead_time: number;
            modify_time: number;
            download_times: number;
            uploader: number;
            uploader_name: string;
        }[];
        folders: {
            group_id: number;
            folder_id: string;
            folder: string;
            folder_name: string;
            create_time: number;
            creator: number;
            creator_name: string;
            total_file_count: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 根据文件夹获取群文件
     */
    get_group_files_by_folder(params: WSSendParam['get_group_files_by_folder']): Promise<{
        files: {
            group_id: number;
            file_id: string;
            file_name: string;
            busid: number;
            size: number;
            upload_time: number;
            dead_time: number;
            modify_time: number;
            download_times: number;
            uploader: number;
            uploader_name: string;
        }[];
        folders: {
            group_id: number;
            folder_id: string;
            folder: string;
            folder_name: string;
            create_time: number;
            creator: number;
            creator_name: string;
            total_file_count: number;
        }[];
    }>;
    /**
     * @gocqhttp
     * 获取群文件链接
     */
    get_group_file_url(params: WSSendParam['get_group_file_url']): Promise<{
        url: string;
    }>;
    /**
     * @gocqhttp
     * 发送私聊文件
     */
    upload_private_file(params: WSSendParam['upload_private_file']): Promise<null>;
    /**
     * @gocqhttp
     * 重置事件过滤器
     */
    /**
     * @gocqhttp
     * 下载文件
     */
    download_file(params: WSSendParam['download_file']): Promise<{
        file: string;
    }>;
    /**
     * @gocqhttp
     * 检查链接安全性
     */
    /**
     * @gocqhttp
     * 获取中文分词
     */
    /**
     * @gocqhttp
     * 快捷操作
     */
    '.handle_quick_operation': (params: WSSendParam[".handle_quick_operation"]) => Promise<null>;
    /**
     * @napcat
     * 设置自定义在线状态
     */
    set_diy_online_status(params: WSSendParam['set_diy_online_status']): Promise<string>;
    /**
     * @napcat
     * 获取分享卡片JSON
     */
    ArkSharePeer(params: WSSendParam['ArkSharePeer']): Promise<{
        errCode: 0;
        errMsg: "";
        arkJson: string;
    }>;
    /**
     * @napcat
     * 获取分享卡片JSON
     */
    ArkShareGroup(params: WSSendParam['ArkShareGroup']): Promise<string>;
    /**
     * @napcat
     * 正常重启
     */
    /**
     * @napcat
     * 获取机器人ID范围
     */
    get_robot_uin_range(): Promise<{
        minUin: string;
        maxUin: string;
    }[]>;
    /**
     * @napcat
     * 设置在线状态
     */
    set_online_status(params: WSSendParam['set_online_status']): Promise<null>;
    /**
     * @napcat
     * 获取分类好友列表
     */
    get_friends_with_category(): Promise<{
        categoryId: number;
        categorySortId: number;
        categoryName: string;
        categoryMbCount: number;
        onlineCount: number;
        buddyList: import("./Interfaces.js").WSSendReturn["get_friend_list"];
    }[]>;
    /**
     * @napcat
     * 设置QQ头像
     */
    set_qq_avatar(params: WSSendParam['set_qq_avatar']): Promise<null>;
    /**
     * @napcat
     * 获取文件
     */
    get_file(params: WSSendParam['get_file']): Promise<{
        file: string;
        url: string;
        file_size: string;
        file_name: string;
        base64?: string;
    }>;
    /**
     * @napcat
     * 转发消息给好友
     */
    forward_friend_single_msg(params: WSSendParam['forward_friend_single_msg']): Promise<null>;
    /**
     * @napcat
     * 转发消息给群
     */
    forward_group_single_msg(params: WSSendParam['forward_group_single_msg']): Promise<null>;
    /**
     * @napcat
     * 中英文翻译
     */
    translate_en2zh(params: WSSendParam['translate_en2zh']): Promise<string[]>;
    /**
     * @napcat
     * 设置表情回复
     */
    set_msg_emoji_like(params: WSSendParam['set_msg_emoji_like']): Promise<null>;
    /**
     * @napcat
     * 发送合并转发
     */
    send_forward_msg(params: WSSendParam['send_forward_msg']): Promise<{
        message_id: number;
        res_id: string;
    }>;
    /**
     * @napcat
     * 标记私聊已读
     */
    mark_private_msg_as_read(params: WSSendParam['mark_private_msg_as_read']): Promise<null>;
    /**
     * @napcat
     * 标记群聊已读
     */
    mark_group_msg_as_read(params: WSSendParam['mark_group_msg_as_read']): Promise<null>;
    /**
     * @napcat
     * 获取私聊历史记录
     */
    get_friend_msg_history(params: WSSendParam['get_friend_msg_history']): Promise<{
        messages: import("./Interfaces.js").WSSendReturn["get_msg"][];
    }>;
    /**
     * @napcat
     * 创建收藏
     */
    create_collection(params: WSSendParam['create_collection']): Promise<{
        result: 0;
        errMsg: "";
    }>;
    /**
     * @napcat
     * 获取收藏
     */
    /**
     * @napcat
     * 设置签名
     */
    set_self_longnick(params: WSSendParam['set_self_longnick']): Promise<{
        result: 0;
        errMsg: "";
    }>;
    /**
     * @napcat
     * 获取最近联系
     */
    get_recent_contact(params: WSSendParam['get_recent_contact']): Promise<({
        lastestMsg: import("./Interfaces.js").WSSendReturn["get_msg"];
        peerUin: string;
        remark: string;
        msgTime: string;
        chatType: number;
        msgId: string;
        sendNickName: string;
        sendMemberName: string;
        peerName: string;
    } | {
        peerUin: string;
        remark: string;
        msgTime: number;
        chatType: number;
        msgId: string;
        sendNickName: string;
        sendMemberName: string;
        peerName: string;
    })[]>;
    /**
     * @napcat
     * 标记所有为已读
     */
    _mark_all_as_read(): Promise<null>;
    /**
     * @napcat
     * 获取个人资料
     */
    get_profile_like(): Promise<{
        uid: string;
        time: number;
        favoriteInfo: {
            total_count: number;
            last_time: number;
            today_count: number;
            userInfos: {
                age: number;
                bAvailableCnt: number;
                bTodayVotedCnt: number;
                count: number;
                customId: number;
                gender: number;
                giftCount: number;
                isFriend: boolean;
                isSvip: boolean;
                isvip: boolean;
                lastCharged: number;
                latestTime: number;
                nick: string;
                src: number;
                uid: string;
                uin: number;
            }[];
        };
        voteInfo: {
            total_count: number;
            new_count: number;
            new_nearby_count: number;
            last_visit_time: number;
            userInfos: {
                age: number;
                bAvailableCnt: number;
                bTodayVotedCnt: number;
                count: number;
                customId: number;
                gender: number;
                giftCount: number;
                isFriend: boolean;
                isSvip: boolean;
                isvip: boolean;
                lastCharged: number;
                latestTime: number;
                nick: string;
                src: number;
                uid: string;
                uin: number;
            }[];
        };
    }[]>;
    /**
     * @napcat
     * 获取收藏表情
     */
    fetch_custom_face(params: WSSendParam['fetch_custom_face']): Promise<string[]>;
    /**
     * @napcat
     * 获取表情回复
     */
    fetch_emoji_like(params: WSSendParam['fetch_emoji_like']): Promise<{
        result: 0;
        errMsg: "";
        emojiLikesList: {
            tinyId: string;
            nickName: string;
            headUrl: string;
        }[];
        cookie: "";
        isLastPage: boolean;
        isFirstPage: boolean;
    }>;
    /**
     * @napcat
     * 设置输入状态
     */
    set_input_status(params: WSSendParam['set_input_status']): Promise<{
        result: 0;
        errMsg: "success";
    }>;
    /**
     * @napcat
     * 获取群信息扩展
     */
    get_group_info_ex(params: WSSendParam['get_group_info_ex']): Promise<{
        groupCode: string;
        resultCode: 0;
        extInfo: {
            groupInfoExtSeq: number;
            reserve: number;
            luckyWordId: string;
            lightCharNum: number;
            luckyWord: string;
            starId: number;
            essentialMsgSwitch: number;
            todoSeq: number;
            blacklistExpireTime: number;
            isLimitGroupRtc: number;
            companyId: number;
            hasGroupCustomPortrait: number;
            bindGuildId: string;
            groupOwnerId: {
                memberUin: string;
                memberUid: string;
                memberQid: string;
            };
            essentialMsgPrivilege: number;
            msgEventSeq: string;
            inviteRobotSwitch: number;
            gangUpId: string;
            qqMusicMedalSwitch: number;
            showPlayTogetherSwitch: number;
            groupFlagPro1: string;
            groupBindGuildIds: {
                guildIds: string[];
            };
            viewedMsgDisappearTime: string;
            groupExtFlameData: {
                switchState: number;
                state: number;
                dayNums: string[];
                version: number;
                updateTime: string;
                isDisplayDayNum: false;
            };
            groupBindGuildSwitch: number;
            groupAioBindGuildId: string;
            groupExcludeGuildIds: {
                guildIds: string[];
            };
            fullGroupExpansionSwitch: number;
            fullGroupExpansionSeq: string;
            inviteRobotMemberSwitch: number;
            inviteRobotMemberExamine: number;
            groupSquareSwitch: number;
        };
    }>;
    /**
     * @napcat
     * 获取群忽略添加请求
     */
    /**
     * @napcat
     * 删除群公告
     */
    _del_group_notice(params: WSSendParam['_del_group_notice']): Promise<null>;
    /**
     * @napcat
     * 获取用户个人资料
     */
    /**
     * @napcat
     * 发送好友戳一戳
     */
    friend_poke(params: WSSendParam['friend_poke']): Promise<null>;
    /**
     * @napcat
     * 发送群戳一戳
     */
    group_poke(params: WSSendParam['group_poke']): Promise<null>;
    /**
     * @napcat
     * 获取数据包状态
     */
    nc_get_packet_status(): Promise<undefined>;
    /**
     * @napcat
     * 获取用户状态
     */
    nc_get_user_status(params: WSSendParam['nc_get_user_status']): Promise<{
        status: number;
        ext_status: number;
    }>;
    /**
     * @napcat
     * 获取 rkey
     */
    nc_get_rkey(): Promise<{
        rkey: string;
        ttl: string;
        time: number;
        type: number;
    }[]>;
    /**
     * @napcat
     * 获取群禁言列表
     */
    get_group_shut_list(params: WSSendParam['get_group_shut_list']): Promise<{
        uid: string;
        qid: string;
        uin: string;
        nick: string;
        remark: string;
        cardType: number;
        cardName: string;
        role: number;
        avatarPath: string;
        shutUpTime: number;
        isDelete: boolean;
        isSpecialConcerned: boolean;
        isSpecialShield: boolean;
        isRobot: boolean;
        groupHonor: {
            [key: string]: number;
        };
        memberRealLevel: number;
        memberLevel: number;
        globalGroupLevel: number;
        globalGroupPoint: number;
        memberTitleId: number;
        memberSpecialTitle: string;
        specialTitleExpireTime: string;
        userShowFlag: number;
        userShowFlagNew: number;
        richFlag: number;
        mssVipType: number;
        bigClubLevel: number;
        bigClubFlag: number;
        autoRemark: string;
        creditLevel: number;
        joinTime: number;
        lastSpeakTime: number;
        memberFlag: number;
        memberFlagExt: number;
        memberMobileFlag: number;
        memberFlagExt2: number;
        isSpecialShielded: boolean;
        cardNameId: number;
    }[]>;
    /**
     * @napcat
     * 获取频道列表
     */
    /**
     * @napcat
     * 获取频道服务简介
     */
    /**
     * @napcat
     * 获取群忽略通知
     */
    get_group_ignored_notifies(params: WSSendParam['get_group_ignored_notifies']): Promise<{
        InvitedRequest: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
        join_requests: {
            request_id: number;
            invitor_uin: number;
            invitor_nick: string;
            group_id: number;
            group_name: string;
            checked: boolean;
            actor: number;
        }[];
    }>;
    /**
     * @napcat
     * 设置群签到
     */
    set_group_sign(params: WSSendParam['set_group_sign']): Promise<null>;
    /**
     * @napcat
     * 发送群签到
     */
    send_group_sign(params: WSSendParam['send_group_sign']): Promise<null>;
    /**
     * @napcat
     * 发送数据包
     */
    send_packet(params: WSSendParam['send_packet']): Promise<string>;
    /**
     * @napcat
     * 获取小程序卡片
     */
    get_mini_app_ark(params: WSSendParam['get_mini_app_ark']): Promise<{
        title: string;
        desc: string;
        picUrl: string;
        jumpUrl: string;
        webUrl?: string;
        sdkId: string;
        appId: string;
        scene: number;
        iconUrl: string;
        templateType: number;
        businessType: number;
        verType: number;
        shareType: number;
        versionId: string;
        withShareTicket: number;
    }>;
    /**
     * @napcat
     * 获取 AI 记录
     */
    get_ai_record(params: WSSendParam['get_ai_record']): Promise<string>;
    /**
     * @napcat
     * 获取 AI 角色列表
     */
    get_ai_characters(params: WSSendParam['get_ai_characters']): Promise<{
        type: string;
        characters: {
            character_id: string;
            character_name: string;
            preview_url: string;
        }[];
    }[]>;
    /**
     * @napcat
     * 发送群 AI 记录
     */
    send_group_ai_record(params: WSSendParam['send_group_ai_record']): Promise<null>;
    /**
     * @napcat
     * 获取客户端密钥
     */
    get_clientkey(): Promise<{
        clientkey: string;
    }>;
    /**
     * @napcat
     * 发送戳一戳
     */
    send_poke(params: WSSendParam['send_poke']): Promise<null>;
    /**
     * @napcat
     * 获取私密文件 URL
     */
    get_private_file_url(params: WSSendParam['get_private_file_url']): Promise<{
        url: string;
    }>;
    /**
     * @napcat
     * 点击内联键盘按钮
     */
    click_inline_keyboard_button(params: WSSendParam['click_inline_keyboard_button']): Promise<{
        result: 0;
        errMsg: "";
        status: number;
        promptText: string;
        promptType: number;
        promptIcon: number;
    }>;
}
